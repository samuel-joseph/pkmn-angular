{"ast":null,"code":"import { getStats, getTypes } from '../helper/pokemon-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/pokemon/pokemon.service\";\nimport * as i2 from \"../helper/pokemon.class\";\nclass PlayerComponent {\n  constructor(http, pokemonService) {\n    this.http = http;\n    this.pokemonService = pokemonService;\n  }\n  ngOnInit() {}\n  chosenPokemon(id) {\n    this.pokemon = this.http.getPokemon(id).subscribe(data => {\n      this.pokemon = data;\n      this.myPokemons.push(data);\n      if (this.myPokemons.length == 6) {\n        this.toStore();\n      }\n    });\n  }\n  removePokemon(id) {\n    let copyMyPokemons = this.myPokemons.filter(pokemon => {\n      return pokemon.id != id;\n    });\n    this.myPokemons = copyMyPokemons;\n  }\n  toStore() {\n    let tempArr = [];\n    for (const myPokemon of this.myPokemons) {\n      let tempArrMoves = [];\n      for (const move of myPokemon.moves) {\n        let url = move.move.url;\n        let learnMethod = move.version_group_details[0].move_learn_method.name;\n        url = url.substring(0, url.length - 1);\n        let index = url.indexOf('2');\n        var id = url.substring(index + \"2/move/\".length),\n          rest = url.substring(0, index);\n        if (this.moveListArr.includes(parseInt(id)) && learnMethod === 'level-up') {\n          let objMove = this.dbMoves.filter(data => data.id === parseInt(id));\n          tempArrMoves.push(...objMove);\n        }\n      }\n      let pokemon = {\n        id: myPokemon.id,\n        name: myPokemon.name,\n        stats: getStats(myPokemon.stats),\n        types: getTypes(myPokemon.types),\n        moves: tempArrMoves,\n        front_image: myPokemon.sprites.front_default,\n        back_image: myPokemon.sprites.back_default\n      };\n      console.log(pokemon);\n      tempArr.push(pokemon);\n      if (tempArr.length == 6) {\n        console.log(tempArr);\n        this.myPokemons = tempArr;\n      }\n    }\n  }\n}\nPlayerComponent.ɵfac = function PlayerComponent_Factory(t) {\n  return new (t || PlayerComponent)(i0.ɵɵdirectiveInject(i1.PokemonService), i0.ɵɵdirectiveInject(i2.Pokemon));\n};\nPlayerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PlayerComponent,\n  selectors: [[\"app-player\"]],\n  decls: 0,\n  vars: 0,\n  template: function PlayerComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PlayerComponent };","map":{"version":3,"names":["getStats","getTypes","PlayerComponent","constructor","http","pokemonService","ngOnInit","chosenPokemon","id","pokemon","getPokemon","subscribe","data","myPokemons","push","length","toStore","removePokemon","copyMyPokemons","filter","tempArr","myPokemon","tempArrMoves","move","moves","url","learnMethod","version_group_details","move_learn_method","name","substring","index","indexOf","rest","moveListArr","includes","parseInt","objMove","dbMoves","stats","types","front_image","sprites","front_default","back_image","back_default","console","log","i0","ɵɵdirectiveInject","i1","PokemonService","i2","Pokemon","selectors","decls","vars","template","PlayerComponent_Template","rf","ctx","styles"],"sources":["/Users/joe/Desktop/newProject2023/pkmn-angular/pkmn-angular/src/app/player/player.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PokemonService } from '../_services/pokemon/pokemon.service';\nimport { PokemonModel, RegionPokemon } from '../model/pokemon-model.model';\nimport { getStats, getMove, getTypes } from '../helper/pokemon-helper';\nimport { Pokemon } from '../helper/pokemon.class';\nimport { MoveModel } from '../model/move-model.model';\n\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.scss']\n})\nexport class PlayerComponent implements OnInit{\n  constructor(\n    private http: PokemonService,\n    private pokemonService: Pokemon\n  ) { }\n  \n  ngOnInit(): void {}\n\n\n\n  chosenPokemon(id: string) {\n    this.pokemon = this.http.getPokemon(id).subscribe((data) => {\n      this.pokemon = data\n      this.myPokemons.push(data)\n      if (this.myPokemons.length == 6) {\n        this.toStore()\n       }\n    })\n  }\n\n  removePokemon(id:any) {\n    let copyMyPokemons = this.myPokemons.filter(pokemon => {\n      return pokemon.id != id\n    })\n    this.myPokemons = copyMyPokemons\n  }\n\n  toStore() {\n    let tempArr = []\n    for (const myPokemon of this.myPokemons) {\n    let tempArrMoves: MoveModel[] = []\n      for (const move of myPokemon.moves) {\n        let url = move.move.url\n        let learnMethod = move.version_group_details[0].move_learn_method.name\n        url = url.substring(0, url.length - 1);\n        let index = url.indexOf('2')\n        var id = url.substring(index + \"2/move/\".length), rest = url.substring(0, index);\n\n        if (this.moveListArr.includes(parseInt(id))&&learnMethod ==='level-up') {\n          let objMove = this.dbMoves.filter(data => data.id === parseInt(id))\n          tempArrMoves.push(...objMove)\n        } \n      }\n\n      let pokemon = {\n        id: myPokemon.id,\n        name: myPokemon.name,\n        stats: getStats(myPokemon.stats),\n        types: getTypes(myPokemon.types),\n        moves: tempArrMoves,\n        front_image: myPokemon.sprites.front_default,\n        back_image: myPokemon.sprites.back_default\n      }\n      console.log(pokemon)\n      tempArr.push(pokemon)\n\n      if (tempArr.length == 6) {\n        console.log(tempArr)\n        this.myPokemons = tempArr\n      }\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}