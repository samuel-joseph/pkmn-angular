{"ast":null,"code":"import { map, throwError } from 'rxjs';\nimport { getStats } from 'src/app/helper/pokemon-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst POKEMON_API = 'https://pokeapi.co/api/v2/pokemon/';\nconst kanto = 151;\nclass PokemonService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemon(id) {\n    return this.http.get(`${POKEMON_API}${id}`).pipe(map(res => {\n      let pokemon = {\n        id: res.id,\n        name: res.name,\n        stats: getStats(res.stats)\n      };\n    }));\n    //   .pipe(map((res) => {\n    //     console.log(res.moves)\n    //     const pokemon = {\n    //       id: res.id,\n    //       name: res.name,\n    //       stats: getStats(res.stats),\n    //       types: getTypes(res.types),\n    //       // moves: getMove(res.moves), \n    //       // front_image: res.sprites.front_default,\n    //       // back_image: res.sprites.front_default\n    //     }\n    //     console.log(\"CHECKING \", pokemon)\n    //     return pokemon\n    //   }))\n    //   .subscribe((res) => {\n    //     console.log(res)\n    //     return res\n    // })\n  }\n\n  getPokemonMove(MOVE_API) {\n    return this.http.get(`${MOVE_API}`);\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nPokemonService.ɵfac = function PokemonService_Factory(t) {\n  return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n};\nPokemonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PokemonService,\n  factory: PokemonService.ɵfac,\n  providedIn: 'root'\n});\nexport { PokemonService };","map":{"version":3,"names":["map","throwError","getStats","POKEMON_API","kanto","PokemonService","constructor","http","getPokemon","id","get","pipe","res","pokemon","name","stats","getPokemonMove","MOVE_API","handleError","error","errorMessage","ErrorEvent","message","status","window","alert","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/joe/Desktop/newProject2023/pkmn-angular/pkmn-angular/src/app/_services/pokemon/pokemon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, map, retry, throwError } from 'rxjs';\nimport { PokemonModel, StatsModel } from 'src/app/model/pokemon-model.model';\nimport { MoveModel } from 'src/app/model/move-model.model';\nimport { getStats,getTypes, getMove } from 'src/app/helper/pokemon-helper';\n\nconst POKEMON_API = 'https://pokeapi.co/api/v2/pokemon/';\nconst kanto = 151\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PokemonService {\n\n  constructor(private http: HttpClient) { }\n\n  getPokemon(id: string){\n    return this.http.get(`${POKEMON_API}${id}`)\n      .pipe(map((res) => {\n        let pokemon = {\n          id: res.id,\n          name: res.name,\n          stats: getStats(res.stats)\n              }\n            }))\n      \n    //   .pipe(map((res) => {\n    //     console.log(res.moves)\n    //     const pokemon = {\n    //       id: res.id,\n    //       name: res.name,\n    //       stats: getStats(res.stats),\n    //       types: getTypes(res.types),\n    //       // moves: getMove(res.moves), \n    //       // front_image: res.sprites.front_default,\n    //       // back_image: res.sprites.front_default\n    //     }\n    //     console.log(\"CHECKING \", pokemon)\n    //     return pokemon\n    //   }))\n    //   .subscribe((res) => {\n    //     console.log(res)\n    //     return res\n    // })\n  }\n\n  getPokemonMove(MOVE_API: string){\n    return this.http.get(`${MOVE_API}`)\n  }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"],"mappings":"AAEA,SAAiCA,GAAG,EAASC,UAAU,QAAQ,MAAM;AAGrE,SAASC,QAAQ,QAA0B,+BAA+B;;;AAE1E,MAAMC,WAAW,GAAG,oCAAoC;AACxD,MAAMC,KAAK,GAAG,GAAG;AAEjB,MAGaC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAGP,WAAW,GAAGM,EAAE,EAAE,CAAC,CACxCE,IAAI,CAACX,GAAG,CAAEY,GAAG,IAAI;MAChB,IAAIC,OAAO,GAAG;QACZJ,EAAE,EAAEG,GAAG,CAACH,EAAE;QACVK,IAAI,EAAEF,GAAG,CAACE,IAAI;QACdC,KAAK,EAAEb,QAAQ,CAACU,GAAG,CAACG,KAAK;OACpB;IACH,CAAC,CAAC,CAAC;IAEX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAC,cAAcA,CAACC,QAAgB;IAC7B,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,GAAGO,QAAQ,EAAE,CAAC;EACrC;EAEAC,WAAWA,CAACC,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,MAAM,CAACC,KAAK,CAACL,YAAY,CAAC;IAC1B,OAAOnB,UAAU,CAAC,MAAK;MACrB,OAAOmB,YAAY;IACrB,CAAC,CAAC;EACJ;;AAnDWf,cAAc,C;mBAAdA,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdxB,cAAc,C;SAAdA,cAAc;EAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEP3B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}